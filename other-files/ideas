# $ongmate

This app's main objective is to connect people who have similar music taste. They can send each other playlists, collaborate in making new playlists, chat about music and their beloved artists.

## Milestone tasks. They are sorted based on their relevance.

### Backend - general
- create endpoints for Frontend - use @RestController, so JSON data will be sent,
- learn about stream API, so it can be used to implement clean data validation from Frontend.

### Frontend - general
- create BASIC views with html, css, js,
- upgrade views so it looks cool,
- use Fetch API or axios library to fetch data from our backend server,
- migrate frontend to React.js, so fancy stuff can be added - use Nelson's tutorial -> https://www.youtube.com/watch?v=i-hoSg8iRG0

### Security layer i.e. authentication, authorization.
- read spring security documentation,
- add security config to the project - i suppose we will use JWT,
- authenticate new songmateUser, by asking Spotify auth server for songmateUser credentials, when creating songmateUser get his password, use Spotify email as a login,
- create some songmateUsers and assign roles to them, then add it db,
- match endpoints with songmateUser roles/permissions,
- set Timeout after inactivity interval - i think it can be done, by using application.properties file.

### Check Spotify API tutorial on connecting your first app to their database.
- https://developer.spotify.com/documentation/web-api/ - already added to maven dependency, git repo have many useful examples, super simple,
- create service which will handle talking to spotify about data,
- use API to fill database tables (Artist, Playlist, Track) - use data.sql file,
- storing songmateUser tokens might be added to User entity, so we can easily send requests to spotify,
- add Spotify controller, so it contains endpoits which will be used to talk to spotify db.

### Develop dummy algorithm which computes graph based on peoples playlists.
- make it in a way that it is stateless and multiple instances can be used to compute graph,
- create algorithm service,
- do some research about it,
- migrate it to microservice.


## Future objectives
### Push it to Amazon s3 bucket.
- check Nelson's tutorial about it.

### Rewrite it to microservice architecture.
- read about msg brokers for Java - JMS?,
- set rabbitMQ container or some different message broker

### Dockerize services.
- do some research,
- dockerize it.

### Make it reactive
- study async Java,
- study reactive programming paradigm,
- use Rx.Java.








# Application Description

Cele i zalozenia aplikacji:
1. Matchowanie uzytkownikow z podobnymi gustami muzycznymi.
2. Aplikacja powinna miec "mini serwisy", ktore pomoga uzytkownikom nawiazac kontakt. Zdaje sie, ze jest to wazny element naszej aplikacji, bo bardzo by nas wyroznilo np. od Tindera, ktory TYLKO matchuje i zostawia uzytkownikow samym sobie, przez co niektorzy zamiast wyrywac dupy, zbieraja pokemony.
3. Aplikacja prowokuje interakcje miedzy uzytkownikami.
4. Spotify tworzy playlisty swoim algorytmem (tworzy jakies daily playlisty gowniane). Nasza apka korzysta z opinii uzytkownikow, co jest wedlug mnie o wiele "precyzyjniejsze" i wyrozni nas na tle Spotify.
5. Najważniejszym filarem aplikacji jest społeczność użytkowników.




## Service matchmaker:
---------------------- Uzytkownicy subskrybuja sie do hashtagow. Listy uzytkownikow zasubskrybowanych do konkretnych hashtagow beda wykorzystane w algorytmie matchowania np. #discover-fismoll-wibe, #jak-to-jest-byc-fanem-disco-polo-dobrze?, #songs-about-drinking-and-doin-drugs, #your-mom-and-i-chill-for-this, #girl-rap-sucks-NOT, #cool-stuff-i-listen-when-homies-aret-here-anymore-xd, #soft-female-voice
Hashtag moze wydac sie zlym, niewystarczajacym rozwiazaniem, ktore za malo mowi o temacie playlisty. Lepiej, zeby to byl sam temat. Jedno zdanie, ktore opisuje te playliste.
Moze dac uzytkownikowi opcje do zrobienia tak i tak. Nie wszyscy chca rozpisywac elaboraty o tym czego szukaja. Trzeba wziac to pod uwage, ze duza czesc ludzi bedzie chciala wbic, zabic czas czyms przyjemnym (np. szerokorozumiane matchowanie lub jakas podobna czynnosc, nie wymagajaca duzo nakladu umyslowego XD).

- 3 etapy matchowania:
    - prePrematch - aplikacja preprematchuje 2 użytkowników porownując wybrane przez nich playlisty. Użytkownicy prePrezmatchowani przechodzą do etapu prematch,
    - prematch - uzytkownik A anonimowo wysyla discoveryEvent z servisu Challenge do uzytkownika B (chyba tylko do jednego, zeby nie spamowac). Uzytkownik B przechodzi discoveryEvent i odsyla odpowiedz.
    - match - Uzytkownik A na podstawie odpowiedzi uzytkownika B podejmuje decyzje o zmatchowaniu.




## Service Challenge:
1. Challenge musi "zmuszac" obydwu uzytkownikow do interakcji. Nie moze byc tak, ze tylko jeden bierze w nim CZYNNY udzial
2. Dwa rodzaje discoveryEvent'y.
  - discoveryEvent od użytkownika A do użytkownika B - służy do matchowania użytkowników,
  - discoveryEvent wysyłany od aplikacji do użytkownika - cele marketingowe. Może zadanie związane z jakimś obecnie trwającym festiwalem muzycznym. Po wykonaniu i ocenie przez ludzi z festiwalu możesz otrzymać wejściówkę albo cokolwiek, co zaproponują organizatorzy.
3. Challenge musza byc roznorodne, powinny sie zmieniac.

Przykladowe discoveryEvent:
- Temat: Tworzenie wspolnej playlisty z jakims tematem.
- Temat: Promowanie jakiegos artysty, najlepiej niszowego. Sekcja z artykulem na temat artysty, moze wywiadem. Cokolwiek, co pozwoli go poznac. Artysta musi skomponowac playliste muzyki pod wybrany przez niego temat/hashtag/cokolwiek_co_wymyslimy. Chodzi o to, zeby pokazac, ze on korzysta z naszej aplikacji
- Temat: Uzytkownik musi stworzyc artykul o swoim ulubionym artyscie, ktorego chce wypromowac, o ktorym chce, zeby uzytkownicy poznali. Aplikacja podpowiada jak moze wygladac taki artykul, ale nie wymusza na uzytkowniku formy. Np. Apka zapewnia "szkielet" artykułu - wstep, rozwiniecie, zakonczenie w formie pytan. Npnp.
Co wyroznia tego artyste?
Ktore albumy, piosenki chcesz wyroznic?
Co najbardziej podoba ci sie w nim? W jego muzyce?
Artykul moze byc zaproszeniem do discoveryEvent'u. Np. Dobierz 3 piosenki, ktore sa w tym stylu, ktore ci sie podobaja.
- Temat: Uzytkownik dostaje powiadomienie o nowym discoveryEvent'u. Dobierz 3 piosen
- Temat: Uzytkownik A napisal artykul o jakims zespole/artyscie. Dobierz 3 piosenki
- Temat: Ocen playliste - Przed trzema piosenkami uzytkownik moze, ale nie musi dostac dodatkowy komentarz od autora na temat tych piosenek w stylu: "Wanna, wino. Na wieczorny #wpiateklezewwannie" albo "7 rano, mroz, czas uderzac w trasę", czy "Trzy piosenki od Hani Rani, bo jest zajebista i zasluguje na wieksza publike"
Uzytkownik dostaje 3 piosenki, ktore moze przesluchac za pomoca wbudowanego api spotify i decyzje, czy chce sie zmatchowac.
- Temat: Uzytkownik A wszedl na strone z artykulem i spedzil na niej 10min. Prawdopodobnie go przeczytal. System sprobuje ich zmatchowac wysylajac dedykowany discoveryEvent jednemu i drugiemu.



### Playlisty na stronie i w bazie:
- Playlista powinna miec sekcje komentarzy, zeby mogli wyrazac swoje opinie.
- Tworzenie grupowe playlist przez uzytkownikow.
- Podobno limit piosenek w playliscie to wiecej niz 10000. To duzo.  Limit playlist na uzytkownika to na pewno wiecej niz 1000. Aplikacja powinna dodawac playlisty do konta uzytkownika na Spotify. Wewnatrz apki Spotify mozna wrzucac playlisty w foldery podobno. Nasza apka powinna dodawac playlisty do jakichs stworzonych znanych folderow np. songmate-latest


### Mikroservice app_stats
Serwis zbierający statystyki na temat ruchu jaki generuje aplikacja. Ilość użytkowników, ilość zmatchowanych osób, wymienionych wiadomości, itd. Ten serwis odpowiada za przetwarzanie tych wszystkich danych z innych serwisów. Output z tego serwisu posłuży nam w celach marketingowych. Można umieszczać te przetworzone dane na stronie głównej, dostępnej PRZED zalogowaniem do aplikacji, żeby zachęcić do skorzystania z niej.

### Microservice user_experience
Potrzebujemy servis badający, ktore discoveryEvent podobaja sie uzytkownikom najbardziej. Powinnismy wysylac ankiete, poprzedzona zapytaniem, czy chca ja wypelnic i wspomoc tym aplikacje.
Ankiety w skali 1-5. Serwis powinien przetwarzać dane (liczy średnią, wariancję, itd).




## Frontend:
- Bez niego nie przyciagniemy ludzi. Musi byc responsywny, zawierac podobne rzeczy do matchowania z Tindera, które dobrze wyglądają i dają fajny feeling użytkowania. #React.js,
- powinien być w barwach nawiązujących do Spotify.

### Strona glowna po zalogowaniu (cos co zacheci uzytkownika do korzystania):
- Tu wkracza Mikroservice app_stats, np. wyskakuje informacja, ze Piosenka xyz polaczyla najwiecej uzytkowników

### Interaktywny feed/wall jak na fb, playlisty grupowe:
- Informacje o zmatchowanych osobach ze Spotify, np.
    - Uzytkownik xyz polubil nowy utwor na Spotify. Kliknij aby przesluchac fragment(chyba jest taka funkcjonalnosc wbudowana w API spotify, tak jak na apce tindera sie da posluchac)
    - Uzytkownik xyz stworzyl playliste o nazwie "Mocne pierdolniecie". Kliknij, zeby przesluchac, dodac do konta.
    - Uzytkownik xyz opublikowal artykul, z hashtagiem ktorego wlasnie szukasz. Wyrozniona informacja.
    - Opublikowano wsrod znajomych chec stworzenia nowej playlisty z okreslonym tematem. Przylacz sie.

### Profil uzytkownika:
Powinien miec tez secje z komentarzami na jego temat. Tak jak na steamie. Mysle, ze to spoko feature. Uzytkownik powinien moc wylaczyc/wlaczyc/ukryc czat.
Czy pozwolic uzytkownikom ogladac niezmatchowanych uzytkownikow? Chyba nie.





### Grupowa playlista?




